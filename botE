const canvas = document.getElementById('gameCanvas');
const ctx = canvas.getContext('2d');
        
// Размер клетки на игровом поле
const cellSize = 100;
        
// Создание пустого игрового поля 3х3
const gameBoard = [
    ['', '', ''],
    ['', '', ''],
    ['', '', '']];
        
// Отслеживание текущего игрока (крестик или нолик)
let currentPlayer = 'X';
    
// Отслеживание состояния игры (незавершена или завершена)
let gameEnded = false;
        
// Отрисовка игрового поля
function drawBoard() {
    ctx.clearRect(0, 0, canvas.width, canvas.height);
            
    for (let row = 0; row < 3; row++) {
        for (let col = 0; col < 3; col++) {
            const cellX = col * cellSize;
            const cellY = row * cellSize;
                    
            ctx.strokeStyle = "gray";
            ctx.lineWidth = 2;
            ctx.strokeRect(cellX, cellY, cellSize, cellSize);
                    
            const cellValue = gameBoard[row][col];
            if (cellValue !== '') {
                ctx.font = "48px Arial";
                ctx.textAlign = "center";
                ctx.textBaseline = "middle";
                ctx.fillText(cellValue, cellX + cellSize / 2, cellY + cellSize / 2);
            }
        }
    }
}

// Функция для проверки победителя
function checkWinner() {
    // Проверка по горизонталям и вертикалям
    for (let i = 0; i < 3; i++) {
        if (gameBoard[i][0] === gameBoard[i][1] && gameBoard[i][1] === gameBoard[i][2] && gameBoard[i][0] !== '') {
            return gameBoard[i][0];
        }
        if (gameBoard[0][i] === gameBoard[1][i] && gameBoard[1][i] === gameBoard[2][i] && gameBoard[0][i] !== '') {
            return gameBoard[0][i];
        }
    }

    // Проверка по диагоналям
    if (gameBoard[0][0] === gameBoard[1][1] && gameBoard[1][1] === gameBoard[2][2] && gameBoard[0][0] !== '') {
        return gameBoard[0][0];
    }
    if (gameBoard[0][2] === gameBoard[1][1] && gameBoard[1][1] === gameBoard[2][0] && gameBoard[0][2] !== '') {
        return gameBoard[0][2];
    }

    // Проверка на ничью
    let isBoardFull = true;
    for (let row = 0; row < 3; row++) {
        for (let col = 0; col < 3; col++) {
            if (gameBoard[row][col] === '') {
                isBoardFull = false;
                break;
            }
        }
    }
    if (isBoardFull) {
        return 'Draw';
    }

    return null;
}

// Функция для хода бота
function botMove() {
    // Рандомный выбор свободной клетки
    let availableMoves = [];
    for (let row = 0; row < 3; row++) {
        for (let col = 0; col < 3; col++) {
            if (gameBoard[row][col] === '') {
                availableMoves.push({ row, col });
            }
        }
    }

    let randomIndex = Math.floor(Math.random() * availableMoves.length);
    let move = availableMoves[randomIndex];

    // Выполнение хода
    gameBoard[move.row][move.col] = 'O';
    currentPlayer = 'X';
    drawBoard();

    // Проверка завершения игры
    let winner = checkWinner();
    if (winner) {
        gameEnded = true;
        setTimeout(function () {
            alert(`Игра окончена! Победитель: ${winner}`);
        }, 100);
    }
}
      
// Обработка клика на игровом поле
function handleCellClick(event) {
    if (gameEnded) return;
            
    const rect = canvas.getBoundingClientRect();
    const mouseX = event.clientX - rect.left;
    const mouseY = event.clientY - rect.top;
            
    const clickedRow = Math.floor(mouseY / cellSize);
    const clickedCol = Math.floor(mouseX / cellSize);
            
    if (gameBoard[clickedRow][clickedCol] === '') {
        gameBoard[clickedRow][clickedCol] = currentPlayer;
        drawBoard();
                
        if (checkWinner()) {
            alert('Игрок ' + currentPlayer + ' победил!');
            gameEnded = true;
            } 
        else if (checkWinner()) {
            alert('Ничья!');
            gameEnded = true;
            } 
        else {
            currentPlayer = (currentPlayer === 'X') ? 'O' : 'X';
            }
    }
}

// Обработчик клика по игровому полю
canvas.addEventListener('click', function (event) {
    if (gameEnded) return;
    
    const rect = canvas.getBoundingClientRect();
    const x = event.clientX - rect.left;
    const y = event.clientY - rect.top;
    
    const col = Math.floor(x / cellSize);
    const row = Math.floor(y / cellSize);
    
    if (gameBoard[row][col] === '') {
        gameBoard[row][col] = currentPlayer;
        drawBoard();
        
        let winner = checkWinner();
        if (winner) {
            gameEnded = true;
            setTimeout(function () {
                if (winner == 'Draw'){
                    alert('Ничья')
                }
                else {
                alert(`Игра окончена! Победитель: ${winner}`);
            }
            }, 100);
        } 
        else {
            currentPlayer = 'O';
            botMove();
        }
    }
});

// Отрисовка игрового поля
function drawBoard() {
    ctx.clearRect(0, 0, canvas.width, canvas.height);
    
    for (let row = 0; row < 3; row++) {
        for (let col = 0; col < 3; col++) {
            const cellX = col * cellSize;
            const cellY = row * cellSize;
            
            ctx.strokeStyle = '#000';
            ctx.lineWidth = 2;
            ctx.strokeRect(cellX, cellY, cellSize, cellSize);
            
            ctx.font = 'bold 48px Arial';
            ctx.textAlign = 'center';
            ctx.textBaseline = 'middle';
            ctx.fillStyle = '#000';
            ctx.fillText(gameBoard[row][col], cellX + cellSize / 2, cellY + cellSize / 2);
        }
    }
}

drawBoard();
